## Inspired by the default template made by helm create and https://github.com/helm/charts/tree/master/stable/prometheus

commonAnnotations: {} # see https://github.com/bitnami/charts/tree/master/bitnami/common

commonLabels: {} # see https://github.com/bitnami/charts/tree/master/bitnami/common

## Define serviceAccount names for components. Defaults to component's fully qualified name.
## TODO: these aren't used yet
##
serviceAccounts:
  corenlp:
    create: false
    # name:
  transcrobes:
    create: false
    # name:

## You must replace these email addresses with your own.
## Let's Encrypt will use this to contact you about expiring
## certificates, and issues related to your account.
certissuer:
  prod:
    name: letsencrypt-prod
    enabled: false
    privateKeySecretRef: transcrobes-le-key-prod
  #   email: user@example.com  # You MUST declare a valid email here, even for staging!
  staging:
    name: letsencrypt-staging
    enabled: false
    privateKeySecretRef: transcrobes-le-key-staging
  #   email: user@example.com  # You MUST declare a valid email here, even for staging!

## Use the ingress-nginx chart dependency
## aliased to ingress in requirements due to template limitations
#
ingress:
  enabled: true
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-staging
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-body-size: 5m
    nginx.ingress.kubernetes.io/enable-cors: "true"
  tls:
    secretName: letsencrypt-cert-staging

  controller:
    ## Enable here for exposing metrics for prometheus
    ##
    metrics:
      enabled: false
      serviceMonitor:
        enabled: false

    ## TODO: Currently only NodePort or HostNetwork are supported, cloud provider LB support to come
    ##
    service:
      # ## Uncomment here to use NodePort. You will need to comment out from type: "" below
      # type: NodePort
      # nodePorts:
      #   ## Define a static NodePort so the cloud provider router can point to a known value
      #   ##
      #   https: 32443
      # ## Enable plain http. This won't work on most browsers, who won't get from an http api when the page is https
      # ##
      # enableHttp: false
      # ## Enable https.
      # ##
      # enableHttps: true  # TODO: this should be linked to the tls configs somehow

    ## direct access to the hosts ports 80 and 443
    ## This is only really appropriate/useful for machines (VMs) that have a public IP (or public IP NAT)
    ## and you are only hosting serving djankiserv on this kubernetes instance
      type: ""
    hostNetwork: true
    kind: DaemonSet
    dnsPolicy: ClusterFirstWithHostNet
    ## end of HostNetwork ingress configuration

## Stanford's CoreNLP with minimal Chinese model
##
corenlpZh:
  ## If false, corenlp will not be installed
  ##
  enabled: true

  ## corenlp container name
  ##
  name: corenlp-zh

  ## corenlp container image
  ##
  image:
    repository: transcrobes/corenlp-chinese
    tag: 4.1.0
    pullPolicy: IfNotPresent

  ## Annotations to be added to corenlp pods
  ##
  podAnnotations: {}

  ## Number of replicas of CoreNLP. CoreNLP takes at least 800MB of RAM for Chinese, even using a special,
  ## reduced model that they (very nicely!) specially created for us, and is a huge consumer of CPU and
  ## bandwidth. Best performance will probably have one of these everywhere, with the possible exception
  ## of the master DB.
  ## TODO: Maybe use taints somehow?
  ##
  replicaCount: 1

  ## Additional corenlp container environment variable
  ## For instance to add a http_proxy
  ##
  extraEnv: {}

  ## Strategy
  ##
  strategy:
    type: Recreate

  ## TODO: document
  service:
    annotations: {}  # TODO: unused???
    labels: {}  # TODO: unused???
    clusterIP: ""  # TODO: unused???

    loadBalancerIP: ""  # TODO: unused???
    loadBalancerSourceRanges: []  # TODO: unused???
    servicePort: 80
    type: ClusterIP  # TODO: unused???

  ## Configuration for the liveness and readiness probes
  ## liveness, see https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes
  liveness:
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5

  ## readiness, see https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes
  readiness:
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5

  ## java launch parameters
  application:
    listenPort: 9000
    queryTimeout: 30000
    javaXmx: 800m

  ## Additional corenlp container arguments
  ##
  extraArgs: {}

  ## The URL prefix at which the container can be accessed. Useful in the case the '-web.external-url' includes a slug
  ## so that the various internal URLs are still able to access as they are in the default case.
  ## (Optional)
  prefixURL: ""

## Config related to the static files, uses https://github.com/bitnami/charts/tree/master/bitnami/nginx
## so all upstream config can be used/overriden. The static resources are compiled into the image, which
## is derived from the bitnami/nginx image
#
static:
  enabled: true
  service:
    type: ClusterIP
  image:
    repository: transcrobes/transcrobes-static
    tag: 0.0.10

  metrics:
    enabled: false
    serviceMonitor:
      enabled: false
      # namespace: monitoring
      # selector:  # so the metrics get picked up with the default settings for kube-prometheus-stack
      #   release: prometheus

## Django App providing the glue and intelligence between other services
##
transcrobes:
  ## If false, transcrobes will not be installed
  ##
  enabled: true

  ## transcrobes container name
  ##
  name: transcrobes

  ## Ingress related configuration for setting up the SSL ingress
  ##
  ingress:
    path: /
    tls:
      enabled: true
      secretName: "transcrobes-transcrobes-cert"
      issuer: letsencrypt-staging  # FIXME: I think this is no longer used
    ## The max body size for requests, see http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size
    ## This needs to be at least as large as the largest request, and as Anki exchanges full, uncompressed databases,
    ## this can be very large
    ##
    maxBodySize: 5m

  ## transcrobes container image
  ##
  image:
    repository: transcrobes/transcrobes
    tag: 0.0.10
    pullPolicy: IfNotPresent

  ## Annotations to be added to transcrobes pods
  ##
  podAnnotations: {}

  ## Number of instances of the main Django app. Should probably be one per node, or thereabouts
  ##
  replicaCount: 1

  ## This persistence houses the static data files (dictionaries, wordlists) for the django service
  ## and also the media files for djankiserv
  ## TODO: these should eventually probably both be dealt with otherwise, like via object storage
  ##
  persistence:
    enabled: true
    accessMode: ReadWriteMany
    size: 10Gi
    # storageClassName: -  # something like longhorn-nfs is required

    ## App config passed as env var and used for volume mount
    ##
    dataRoot: '/opt/transcrobes/'
    mediaPath: 'media'

  ## Configuration for the liveness and readiness probes
  ## liveness, see https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes
  ## WARNING! Currently disabled
  ##
  liveness:
    periodSeconds: 60
    initialDelaySeconds: 5
    timeoutSeconds: 60

  ## readiness, see https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes
  ## WARNING! Currently disabled
  ##
  readiness:
    periodSeconds: 60
    initialDelaySeconds: 5
    timeoutSeconds: 60

  ## These are turned into env vars that are required for the Django app
  ##
  bingSubscriptionKey: "your_bing_subscription_key"
  bingApiHost: 'api.cognitive.microsofttranslator.com'
  secretKey: 'not_a_very_good_secret'  # FIXME: do as a secret
  debug: false

  ## Files mounted into the dataRoot
  ## TODO: see notes in the persistence section above
  ##
  zhEnCedict:
    path: 'data/zh_en_cedict.txt'
    inmem: True
  zhEnAbcDict:
    path: 'data/zh_en_abc_dict.txt'
    inmem: True
  zhHskLists:
    path: 'data/zh_hsk{}.txt'
    inmem: True
  zhSubtlexFreq:
    path: 'data/zh_subtlex.utf8.txt'
    inmem: True

  ## Additional transcrobes container environment variable
  ## For instance to add a http_proxy
  ##
  extraEnv:
    PYTHONDONTWRITEBYTECODE: "1"

    ## Mailgun and registration details. If you allow learner signups, this must be configured
    ## Currently only
    # TRANSCROBES_MAILGUN_API_KEY: your_mailgun_api_key
    # TRANSCROBES_DEFAULT_FROM_EMAIL: your@email.com
    # TRANSCROBES_SERVER_EMAIL: your@email.com
    # TRANSCROBES_ACCOUNT_ACTIVATION_DAYS: 1
    # TRANSCROBES_REGISTRATION_OPEN: false

    ## JWT configs
    ##
    # TRANSCROBES_JWT_ACCESS_TOKEN_LIFETIME_MINS: 10
    # TRANSCROBES_JWT_REFRESH_TOKEN_LIFETIME_DAYS: 1

  ## Strategy
  ##
  strategy:
    type: RollingUpdate

  ## Publicly defined and accessible FQDN pointing to this kubernetes cluster
  ## Having a public host for each
  ##
  nodeHosts: ['tc1.example.com']  # one for each publicly configured node - TODO: investigate doing this automatically!

  ## the name users will use, will have multiple A-records associated with all the node hosts
  ##
  haHosts: transcrobes.example.com

  ## TODO: document
  service:
    annotations: {}
    labels: {}
    clusterIP: ""

    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 80
    type: ClusterIP

  ## app config passed as env vars
  ##
  application:
    ## Internal IP for transcrobes to listen on
    ##
    listenAddress: 0.0.0.0
    ## Internal port for transcrobes to listen on
    ##
    listenPort: 8000
    ## Number of gunicorn workers
    ##
    gunicornWorkers: 1
    ## gunicorn process timeout, see http://docs.gunicorn.org/en/latest/settings.html#timeout
    ##
    gunicornTimeout: 120

  ## Additional transcrobes container arguments
  ##
  extraArgs: {}

  ## The URL prefix at which the container can be accessed. Useful in the case the '-web.external-url' includes a slug
  ## so that the various internal URLs are still able to access as they are in the default case.
  ## (Optional)
  prefixURL: ""

  ## Prometheus exporter parameters
  ##
  metrics:
    service:
      port: 9123
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.transcrobes.metrics.service.port }}"
    enabled: false
    serviceMonitor:
      enabled: false

      ## Specify a namespace if needed
      # namespace: monitoring
      # selector:  # so the metrics get picked up with the default settings for kube-prometheus-stack
      #   release: prometheus
      # fallback to the prometheus default unless specified
      # interval: 10s
      # scrapeTimeout: 10s

## This section inspired by
## https://github.com/helm/charts/blob/cbd5e811a44c7bac6226b019f1d1810ef5ee45fa/stable/quassel/values.yaml
## Configuration values for the postgresql dependency.
## ref: https://github.com/kubernetes/charts/blob/master/stable/postgresql/README.md
##

pgha:
  enabled: true
  ## Override of upstream pullPolicy
  ##
  postgresqlImage:
    pullPolicy: IfNotPresent

  ## Must override due to the postgresql.fullname and postgresql.master.fullname templates not working in our templates
  ## TODO: it is probably possible to do this properly with imports
  ##
  # fullnameOverride: tcr-postgres

  # Needed because of a bug when specifying extendedConf
  volumePermissions:
    enabled: true

  postgresql:
    ## Use the PostgreSQL chart dependency.
    ##
    enabled: true

    ### PostgreSQL User to create.
    ##
    username: postgres

    ## PostgreSQL Password for the new user.
    ## If not set, a random 10 characters password will be used.
    ##
    password: transpass
    repmgrPassword: transpass

    ## PostgreSQL Database to create.
    ##
    database: transcrobes

    ## PostgreSQL override parameters added to main config
    ##
    # extendedConf: { "sharedBuffers": "2GB" }

    ## PostgreSQL max_connections parameter
    ##
    # maxConnections: 100

  ## Persistent Volume Storage configuration.
  ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes
  ##
  persistence:
    ## Enable PostgreSQL persistence using Persistent Volume Claims.
    ##
    enabled: true
    ## Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"

    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    accessMode: ReadWriteOnce

    size: 10Gi

  ## Don't always pull image
  volumePermissionsImage:
    pullPolicy: IfNotPresent

## Kafka for system user events
kafka:
  fullnameOverride: kafka
  enabled: true

## Django managment command that consumes user events to update aggregated stats
statsrunner:
  name: statsrunner
  enabled: true
  debug: false

  ## statsrunner container image
  ## All the code is in the main transcrobes/transcrobes image
  ## currently there is no way to use a different version of the image
  ##

  ## desc here FIXME:
  #
  kafkaConnection:
    consumerTimeoutMs: 5000  # millisecs
    statsLoopSleepSecs: 10  # secs
    maxPollRecords: 500  # 500 is default

  ## Number of statsrunners to launch, currently this has only been tested with one
  ##
  replicaCount: 1

  ## Additional statsrunner container environment variable
  ##
  extraEnv: {}

  ## Strategy
  ##
  strategy:
    type: Recreate

  ## Annotations to be added to ankrobes pods
  ##
  podAnnotations: {}
